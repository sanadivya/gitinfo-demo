substitutions:
  _ENV: dev
  _PROJECT_ID: articulate-area-464808-q4
  _SERVICE_NAME: gitinfo-demo
  _REGION: europe-west1
  _REPO: gitinfo-demo
  _SERVICE_ACCOUNT: 715553450089-compute@developer.gserviceaccount.com

options:
  logging: CLOUD_LOGGING_ONLY

available_secrets:
  secretManager:
    - versionName: projects/${_PROJECT_ID}/secrets/GITHUB_TOKEN/versions/latest
      env: GITHUB_TOKEN
    - versionName: projects/${_PROJECT_ID}/secrets/TEAMS_WEBHOOK_URL/versions/latest
      env: TEAMS_WEBHOOK_URL

steps:
  
  - id: Build
    name: "gcr.io/cloud-builders/docker"
    entrypoint: "bash"
    args:
      - -c
      - |
        echo "üîß Building image..."
        if ! docker build -t "${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_REPO}/${_SERVICE_NAME}:$SHORT_SHA" .; then
          echo "Build failed" > /workspace/failure_marker
        fi

  - id: Push
    name: "gcr.io/cloud-builders/docker"
    entrypoint: "bash"
    args:
      - -c
      - |
        echo "üì¶ Pushing image..."
        if ! docker push "${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_REPO}/${_SERVICE_NAME}:$SHORT_SHA"; then
          echo "Push failed" > /workspace/failure_marker
        fi

  - id: Deploy
    name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    entrypoint: "bash"
    args:
      - -c
      - |
        echo "üöÄ Starting deployment..."
        if ! gcloud run deploy "${_SERVICE_NAME}" \
          --image="${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_REPO}/${_SERVICE_NAME}:$SHORT_SHA" \
          --region="${_REGION}" \
          --allow-unauthenticated \
          --service-account="${_SERVICE_ACCOUNT}" \
          --set-secrets="TEAMS_WEBHOOK_URL=TEAMS_WEBHOOK_URL:latest" \
          --set-secrets="GITHUB_TOKEN=GITHUB_TOKEN:latest"; then
          echo "Deploy failed" > /workspace/failure_marker
        fi

  - name: "ubuntu"
    id: Notify
    entrypoint: "bash"
    waitFor: ["Build", "Push", "Deploy"]
    secretEnv: ['GITHUB_TOKEN', 'TEAMS_WEBHOOK_URL']
    args:
      - -c
      - |
        echo "üì¶ Installing curl jq..."
        apt-get update && apt-get install -y curl jq git

        echo "üì£ Sending Teams notification..."
        if [ -f /workspace/failure_marker ]; then
          echo "‚ùå Failure detected. Sending failure message..."

          curl -X POST -H "Content-Type: application/json" \
          -d "{
                \"@type\": \"MessageCard\",
                \"@context\": \"http://schema.org/extensions\",
                \"summary\": \"Deployment Failure\", 
                \"themeColor\": \"FF0000\",
                \"title\": \"‚ùå Deployment failed for BE '${_ENV}' environment\",
                \"sections\": [
                  {
                    \"activityTitle\": \"Failure Details\",
                    \"text\": \"- **Environment**: ${_ENV}\\n- **Project**: ${_PROJECT_ID}\\n- **Service**: ${_SERVICE_NAME}\\n- **Version**: $SHORT_SHA\"}, 
                    {
                      \"activityTitle\": \"Status\", 
                      \"text\": \"Deployment Failed.\"
                    }
                ]
              }" \
          "$$TEAMS_WEBHOOK_URL"

        else
        
          COMMIT_SHA=$(git rev-parse HEAD)

          echo "Fetching commit info..."
          COMMIT_API="https://api.github.com/repos/sanadivya/gitinfo-demo/commits/$$COMMIT_SHA"
          COMMIT_DATA=$(curl -s -H "Authorization: token $$GITHUB_TOKEN" "$$COMMIT_API")
          COMMIT_MESSAGE=$(echo "$$COMMIT_DATA" | jq -r '.commit.message')
          COMMIT_AUTHOR=$(echo "$$COMMIT_DATA" | jq -r '.commit.author.name')

          PR_API="https://api.github.com/repos/sanadivya/gitinfo-demo/commits/$$COMMIT_SHA/pulls"
          PR_DATA=$(curl -s -H "Authorization: token $$GITHUB_TOKEN" -H "Accept: application/vnd.github.groot-preview+json" "$$PR_API")
          PR_COUNT=$(echo "$$PR_DATA" | jq 'length')

          echo "$$PR_DATA"

          if [ "$$PR_COUNT" -gt 0 ]; then
            PR_NUMBER=$(echo "$$PR_DATA" | jq -r '.[0].number')
            PR_TITLE=$(echo "$$PR_DATA" | jq -r '.[0].title')
            PR_SOURCE=$(echo "$$PR_DATA" | jq -r '.[0].head.ref')
            PR_TARGET=$(echo "$$PR_DATA" | jq -r '.[0].base.ref')
            PR_DESCRIPTION=$(echo "$$PR_DATA" | jq -r '.[0].body')

            if [ "$$PR_DESCRIPTION" = "null" ] || [ -z "$$PR_DESCRIPTION" ]; then
              PR_DESCRIPTION="-"
            fi

            PR_AUTHOR_LOGIN=$(echo "$$PR_DATA" | jq -r '.[0].user.login')

            PR_AUTHOR_NAME=$(curl -s -H "Authorization: token $$GITHUB_TOKEN" \
              "https://api.github.com/users/$${PR_AUTHOR_LOGIN}" | jq -r '.name')

            if [ "$$PR_AUTHOR_NAME" = "null" ] || [ -z "$$PR_AUTHOR_NAME" ]; then
              PR_AUTHOR_NAME="$${PR_AUTHOR_LOGIN}"
            fi

            PR_DESCRIPTION_FORMATTED=$(echo "$${PR_DESCRIPTION}" | sed 's/^/  /' | sed ':a;N;$!ba;s/\n/\\n/g')

            DETAILS="\n- **PR Title**: $${PR_TITLE}\\n- **PR Number**: #$${PR_NUMBER}\\n- **PR Description**: \\n$${PR_DESCRIPTION_FORMATTED}\\n- **PR Author**: $${PR_AUTHOR_NAME}"
            ESCAPED_DETAILS=$(printf '%s' "$${DETAILS}" | jq -R | jq -s -r 'join("\\n")')

            GIT_INFO_SECTION="{
              \"activityTitle\": \"PR Details\",
              \"text\": \"$${ESCAPED_DETAILS}\"
            },"
            
          else
            GIT_INFO_SECTION=""
            DETAILS=""
          fi
           
          echo "$$DETAILS"

          curl -X POST -H "Content-Type: application/json" \
          -d "{
                \"@type\": \"MessageCard\",
                \"@context\": \"http://schema.org/extensions\",
                \"summary\": \"Deployment Notification\",
                \"themeColor\": \"00FF00\",
                \"title\": \"‚úÖ New version deployed to ${_ENV} environment\",
                \"sections\": [
                  {
                    \"activityTitle\": \"Deployment Details\",
                    \"text\": \"- **Environment**: ${_ENV}\\n- **Project**: ${_PROJECT_ID}\\n- **Service**: ${_SERVICE_NAME}\\n- **Version**: $SHORT_SHA\"
                  },
                  $${GIT_INFO_SECTION} 
                  {
                    \"activityTitle\": \"Status\",
                    \"text\": \"Deployment completed successfully.\"
                  }
                ]
              }" \
            "$$TEAMS_WEBHOOK_URL"
        fi

  # - name: "ubuntu"
  #   id: Notify
  #   entrypoint: "bash"
  #   waitFor: ["Build", "Push", "Deploy"]
  #   secretEnv:
  #     ["GITHUB_TOKEN", "TEAMS_WEBHOOK_URL", "TEAMS_WEBHOOK_URL_FAILURE"]
  #   args:
  #     - -c
  #     - |
  #       echo "üì¶ Installing curl jq..."
  #       apt-get update && apt-get install -y curl jq git

  #       echo "üì£ Sending Teams notification..."
  #       if [ -f /workspace/failure_marker ]; then
  #         echo "‚ùå Failure detected. Sending failure message..."

  #         curl -X POST -H "Content-Type: application/json" \
  #           -d "$(cat <<EOF
  #       {
  #         "@type": "MessageCard",
  #         "@context": "http://schema.org/extensions",
  #         "summary": "Deployment Failure",
  #         "themeColor": "FF0000",
  #         "title": "‚ùå Deployment failed for BE '${_ENV}' environment",
  #         "sections": [
  #           {
  #             "activityTitle": "Failure Details",
  #             "text": "- **Environment**: ${_ENV}\\n- **Project**: ${_PROJECT_ID}\\n- **Service**: ${_SERVICE_NAME}\\n- **Version**: ${SHORT_SHA}"
  #           },
  #           {
  #             "activityTitle": "Status",
  #             "text": "Deployment Failed."
  #           }
  #         ]
  #       }
  #       EOF
  #                 )" "$$TEAMS_WEBHOOK_URL_FAILURE"

  #             else
  #               COMMIT_SHA=$(git rev-parse HEAD)

  #               echo "Fetching commit info..."
  #               COMMIT_API="https://api.github.com/repos/MSN-EPIC/epic-be/commits/${COMMIT_SHA}"
  #               COMMIT_DATA=$(curl -s -H "Authorization: token $$GITHUB_TOKEN" "$$COMMIT_API")
  #               COMMIT_MESSAGE=$(echo "$$COMMIT_DATA" | jq -r '.commit.message')
  #               COMMIT_AUTHOR=$(echo "$$COMMIT_DATA" | jq -r '.commit.author.name')

  #               PR_API="https://api.github.com/repos/MSN-EPIC/epic-be/commits/$${COMMIT_SHA}/pulls"
  #               PR_DATA=$(curl -s -H "Authorization: token $$GITHUB_TOKEN" -H "Accept: application/vnd.github.groot-preview+json" "$$PR_API")
  #               PR_COUNT=$(echo "$$PR_DATA" | jq 'length')

  #               if [ "$$PR_COUNT" -gt 0 ]; then
  #                 PR_NUMBER=$(echo "$$PR_DATA" | jq -r '.[0].number')
  #                 PR_TITLE=$(echo "$$PR_DATA" | jq -r '.[0].title')
  #                 PR_SOURCE=$(echo "$$PR_DATA" | jq -r '.[0].head.ref')
  #                 PR_TARGET=$(echo "$$PR_DATA" | jq -r '.[0].base.ref')
  #                 PR_DESCRIPTION=$(echo "$$PR_DATA" | jq -r '.[0].body')
  #                 PR_AUTHOR=$(echo "$$PR_DATA" | jq -r '.[0].user.login')

  #                 PR_DESCRIPTION_FORMATTED=$(echo "$PR_DESCRIPTION" | sed 's/^/  /' | sed ':a;N;$!ba;s/\n/\\n/g')

  #                 DETAILS="\n- **PR Title**: $${PR_TITLE}\\n- **PR Number**: #$${PR_NUMBER}\\n- **Branch**: $${PR_SOURCE} ‚Üí $${PR_TARGET}\\n- **PR Description**:\\n$${PR_DESCRIPTION_FORMATTED}\\n- **PR Author**: $${PR_AUTHOR}"

  #                 GIT_INFO_SECTION=$(cat <<EOF
  #       {
  #         "activityTitle": "PR Details",
  #         "text": "$${DETAILS}"
  #       },
  #       EOF
  #                 )
  #               else
  #                 GIT_INFO_SECTION=""
  #               fi

  #               echo -e "$${DETAILS}"

  #               curl -X POST -H "Content-Type: application/json" \
  #                 -d "$(cat <<EOF
  #       {
  #         "@type": "MessageCard",
  #         "@context": "http://schema.org/extensions",
  #         "summary": "Deployment Notification",
  #         "themeColor": "00FF00",
  #         "title": "‚úÖ New version deployed to BE ${_ENV} environment",
  #         "sections": [
  #           {
  #             "activityTitle": "Deployment Details",
  #             "text": "- **Environment**: ${_ENV}\\n- **Project**: ${_PROJECT_ID}\\n- **Service**: ${_SERVICE_NAME}\\n- **Version**: ${SHORT_SHA}"
  #           },
  #           $${GIT_INFO_SECTION}
  #           {
  #             "activityTitle": "Status",
  #             "text": "Deployment completed successfully."
  #           }
  #         ]
  #       }
  #       EOF
  #                 )" "$$TEAMS_WEBHOOK_URL"
  #             fi
