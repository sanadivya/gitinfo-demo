substitutions:
  _ENV: dev
  _PROJECT_ID: articulate-area-464808-q4
  _SERVICE_NAME: gitinfo-demo
  _REGION: europe-west1
  _REPO: gitinfo-demo
  _SERVICE_ACCOUNT: 715553450089-compute@developer.gserviceaccount.com

options:
  logging: CLOUD_LOGGING_ONLY

available_secrets:
  secretManager:
    - versionName: projects/${_PROJECT_ID}/secrets/GITHUB_TOKEN/versions/latest
      env: GITHUB_TOKEN
    - versionName: projects/${_PROJECT_ID}/secrets/TEAMS_WEBHOOK_URL/versions/latest
      env: TEAMS_WEBHOOK_URL
    - versionName: projects/${_PROJECT_ID}/secrets/TEAMS_WEBHOOK_FAILURE_URL/versions/latest
      env: TEAMS_WEBHOOK_FAILURE_URL

steps:
  
  - id: Build
    allowFailure: true
    name: "gcr.io/cloud-builders/docker"
    entrypoint: "bash"
    args:
      - -c
      - |
        echo "üîß Simulating build..."
        if ! docker build -t "${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_REPO}/${_SERVICE_NAME}:$SHORT_SHA" .; then
          echo "Build failed" > /workspace/failure_marker
        fi

  - id: Push
    allowFailure: true
    waitFor: ["Build"]
    name: "gcr.io/cloud-builders/docker"
    entrypoint: "bash"
    args:
      - -c
      - |
        echo "üì¶ Pushing image..."
        if ! docker push "${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_REPO}/${_SERVICE_NAME}:$SHORT_SHA"; then
          echo "Push failed" > /workspace/failure_marker
        fi

  - id: Deploy
    allowFailure: true
    waitFor: ["Push"]
    name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    entrypoint: "bash"
    args:
      - -c
      - |
        echo "üöÄ Starting deployment..."
        if ! gcloud run deploy "${_SERVICE_NAME}" \
          --image="${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_REPO}/${_SERVICE_NAME}:$SHORT_SHA" \
          --region="${_REGION}" \
          --allow-unauthenticated \
          --service-account="${_SERVICE_ACCOUNT}" \
          --set-secrets="TEAMS_WEBHOOK_URL=TEAMS_WEBHOOK_URL:latest" \
          --set-secrets="TEAMS_WEBHOOK_FAILURE_URL=TEAMS_WEBHOOK_FAILURE_URL:latest" \
          --set-secrets="GITHUB_TOKEN=GITHUB_TOKEN:latest"; then
          echo "Deploy failed" > /workspace/failure_marker
        fi

  - name: "ubuntu"
    id: Notify
    entrypoint: "bash"
    waitFor: ["Build", "Push", "Deploy"]
    allowFailure: true
    secretEnv: ['GITHUB_TOKEN', 'TEAMS_WEBHOOK_URL', 'TEAMS_WEBHOOK_FAILURE_URL']
    args:
      - -c
      - |
        echo "üîî Notify step started"
        echo "üîç Checking for failure marker..."

        echo "üì¶ Installing curl jq..."
        apt-get update && apt-get install -y curl jq git

        COMMIT_SHA=$(git rev-parse HEAD)

        echo "Fetching commit info..."
        COMMIT_API="https://api.github.com/repos/sanadivya/gitinfo-demo/commits/$$COMMIT_SHA"
        COMMIT_DATA=$(curl -s -H "Authorization: token $$GITHUB_TOKEN" "$$COMMIT_API")
        COMMIT_MESSAGE=$(echo "$$COMMIT_DATA" | jq -r '.commit.message')
        COMMIT_AUTHOR=$(echo "$$COMMIT_DATA" | jq -r '.commit.author.name')

        FAIL_REASON=$(cat /workspace/failure_marker)
        echo "üîç Reason: $$FAIL_REASON"

        echo "üì£ Sending Teams notification..."
        if [ -f /workspace/failure_marker ]; then
          echo "‚ùå Failure detected. Sending failure message..."

          curl -X POST -H "Content-Type: application/json" \
          -d "{
                \"@type\": \"MessageCard\",
                \"@context\": \"http://schema.org/extensions\",
                \"summary\": \"Deployment Failure\", 
                \"themeColor\": \"FF0000\",
                \"title\": \"‚ùå Deployment failed for BE '${_ENV}' environment\",
                \"sections\": [
                  {
                    \"activityTitle\": \"Failure Details\",
                    \"text\": \"- **Environment**: ${_ENV}\\n- **Project**: ${_PROJECT_ID}\\n- **Service**: ${_SERVICE_NAME}\\n- **Version**: $SHORT_SHA\\n- **Commit Author**: $$COMMIT_AUTHOR\"}, 
                    {
                      \"activityTitle\": \"Status\", 
                      \"text\": \"Deployment Failed.\"
                    }
                ]
              }" \
            "$$TEAMS_WEBHOOK_FAILURE_URL"
        else
          LATEST_PR_DATA=$(curl -s -H "Authorization: token YOUR_GITHUB_TOKEN" \
             "https://api.github.com/repos/MSN-EPIC/epic-be/pulls?state=closed&sort=updated&direction=desc&per_page=1" \
             | jq '[.[] | select(.merged_at != null)][0]')

          if [ "$$PR_COUNT" -gt 0 ]; then
            PR_NUMBER=$(echo "$$LATEST_PR_DATA" | jq -r '.[0].number')
            PR_TITLE=$(echo "$$LATEST_PR_DATA" | jq -r '.[0].title')
            PR_SOURCE=$(echo "$$LATEST_PR_DATA" | jq -r '.[0].head.ref')
            PR_TARGET=$(echo "$$LATEST_PR_DATA" | jq -r '.[0].base.ref')
            PR_DESCRIPTION=$(echo "$$LATEST_PR_DATA" | jq -r '.body')

            echo "PR Number: $$PR_NUMBER"
            echo "Title: $$PR_TITLE"
            echo "Source Branch: $$PR_SOURCE"
            echo "Target Branch: $$PR_TARGET"
            echo "Description: $$PR_DESCRIPTION"

            if [ "$$PR_DESCRIPTION" = "null" ] || [ -z "$$PR_DESCRIPTION" ]; then
              PR_DESCRIPTION="-"
            fi

            PR_AUTHOR_LOGIN=$(echo "$$LATEST_PR_DATA" | jq -r '.[0].user.login')

            PR_AUTHOR_NAME=$(curl -s -H "Authorization: token $$GITHUB_TOKEN" \
              "https://api.github.com/users/$${PR_AUTHOR_LOGIN}" | jq -r '.name')

            if [ "$$PR_AUTHOR_NAME" = "null" ] || [ -z "$$PR_AUTHOR_NAME" ]; then
              PR_AUTHOR_NAME="$${PR_AUTHOR_LOGIN}"
            fi

            PR_DESCRIPTION_FORMATTED=$(echo "$${PR_DESCRIPTION}" | sed 's/^/  /' | sed ':a;N;$!ba;s/\n/\\n/g')

            DETAILS="\n- **PR Title**: $${PR_TITLE}\\n- **PR Number**: #$${PR_NUMBER}\\n- **PR Description**: \\n$${PR_DESCRIPTION_FORMATTED}\\n- **PR Author**: $${PR_AUTHOR_NAME}"
            ESCAPED_DETAILS=$(printf '%s' "$${DETAILS}" | jq -R | jq -s -r 'join("\\n")')

            GIT_INFO_SECTION="{
              \"activityTitle\": \"PR Details\",
              \"text\": \"$${ESCAPED_DETAILS}\"
            },"
            
          else
            GIT_INFO_SECTION=""
            DETAILS=""
          fi
           
          if [ "$_ENV" = "dev" ]; then
            THEME_COLOR="00FF00"  # Green
          elif [ "$_ENV" = "staging" ]; then
            THEME_COLOR="FFA500"  # Orange
          elif [ "$_ENV" = "prod" ]; then
            THEME_COLOR="FF0000"  # Red
          fi

          curl -X POST -H "Content-Type: application/json" \
          -d "{
                \"@type\": \"MessageCard\",
                \"@context\": \"http://schema.org/extensions\",
                \"summary\": \"Deployment Notification\",
                \"themeColor\": \"$$THEME_COLOR\",
                \"title\": \"‚úÖ New version deployed to ${_ENV} environment\",
                \"sections\": [
                  {
                    \"activityTitle\": \"Deployment Details\",
                    \"text\": \"- **Environment**: ${_ENV}\\n- **Project**: ${_PROJECT_ID}\\n- **Service**: ${_SERVICE_NAME}\\n- **Version**: $SHORT_SHA\"
                  },
                  $${GIT_INFO_SECTION} 
                  {
                    \"activityTitle\": \"Status\",
                    \"text\": \"Deployment completed successfully.\"
                  }
                ]
              }" \
            "$$TEAMS_WEBHOOK_URL"
        fi