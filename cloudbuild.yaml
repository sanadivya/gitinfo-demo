substitutions:
  _ENV: dev
  _PROJECT_ID: articulate-area-464808-q4
  _SERVICE_NAME: gitinfo-demo
  _REGION: europe-west1
  _REPO: gitinfo-demo
  _SERVICE_ACCOUNT: 715553450089-compute@developer.gserviceaccount.com

options:
  logging: CLOUD_LOGGING_ONLY

available_secrets:
  secretManager:
    - versionName: projects/${_PROJECT_ID}/secrets/GITHUB_TOKEN/versions/latest
      env: GITHUB_TOKEN
    - versionName: projects/${_PROJECT_ID}/secrets/TEAMS_WEBHOOK_URL/versions/latest
      env: TEAMS_WEBHOOK_URL

steps:
  
  - id: Build
    name: "gcr.io/cloud-builders/docker"
    entrypoint: "bash"
    args:
      - -c
      - |
        echo "üîß Building image..."
        if ! docker build -t "${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_REPO}/${_SERVICE_NAME}:$SHORT_SHA" .; then
          echo "Build failed" > /workspace/failure_marker
        fi

  - id: Push
    name: "gcr.io/cloud-builders/docker"
    entrypoint: "bash"
    args:
      - -c
      - |
        echo "üì¶ Pushing image..."
        if ! docker push "${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_REPO}/${_SERVICE_NAME}:$SHORT_SHA"; then
          echo "Push failed" > /workspace/failure_marker
        fi

  - id: Deploy
    name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    entrypoint: "bash"
    args:
      - -c
      - |
        echo "üöÄ Starting deployment..."
        if ! gcloud run deploy "${_SERVICE_NAME}" \
          --image="${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_REPO}/${_SERVICE_NAME}:$SHORT_SHA" \
          --region="${_REGION}" \
          --allow-unauthenticated \
          --service-account="${_SERVICE_ACCOUNT}" \
          --set-secrets="TEAMS_WEBHOOK_URL=TEAMS_WEBHOOK_URL:latest" \
          --set-secrets="GITHUB_TOKEN=GITHUB_TOKEN:latest"; then
          echo "Deploy failed" > /workspace/failure_marker
        fi

  # - name: 'alpine'
  #   id: Notify
  #   entrypoint: 'sh'
  #   waitFor: ["Build", "Push", "Deploy"]
  #   secretEnv: ['GITHUB_TOKEN']
  #   args:
  #     - -c
  #     - | 
  #       echo "üì¶ Installing curl jq..."
  #       apk add --no-cache curl jq   

  #       echo "üì£ Sending Teams notification..."
  #       if [ -f /workspace/failure_marker ]; then
  #         echo "‚ùå Failure detected. Sending failure message..."
  #         curl -X POST -H "Content-Type: application/json" \
  #         -d '{
  #           "@type": "MessageCard",
  #           "@context": "http://schema.org/extensions",
  #           "summary": "Deployment Failure",
  #           "themeColor": "FF0000",
  #           "title": "‚ùå Deployment failed for BE '${_ENV}' environment",
  #           "sections": [{
  #             "activityTitle": "Failure Details",
  #             "text": "\n- **Environment**: `${_ENV}`\n- **Project**: `${_PROJECT_ID}`\n- **Service**: `${_SERVICE_NAME}`\n- **Version**: `$SHORT_SHA`"
  #           }]
  #         }' "${_TEAMS_WEBHOOK_URL}"
  #       else    
  #           COMMIT_SHA="${SHORT_SHA}"

  #           echo "Fetching commit info..."
  #           COMMIT_API="https://api.github.com/repos/sanadivya/gitinfo-demo/commits/"${COMMIT_SHA}""
  #           COMMIT_DATA=$(curl -s -H "Authorization: token ${_GITHUB_TOKEN}" "$COMMIT_API")

  #           echo "API URL: '$COMMIT_API'"
  #           COMMIT_MESSAGE=$(echo "$COMMIT_DATA" | jq -r '.commit.message')
  #           COMMIT_AUTHOR=$(echo "$COMMIT_DATA" | jq -r '.commit.author.name')

  #           echo "Checking PRs associated with the commit..."
  #           PR_API="https://api.github.com/repos/sanadivya/gitinfo-demo/commits/${SHORT_SHA}/pulls"
  #           PR_DATA=$(curl -s -H "Authorization: token ${_GITHUB_TOKEN}" -H "Accept: application/vnd.github.groot-preview+json" "$PR_API")

  #           PR_COUNT=$(echo "$PR_DATA" | jq 'length')

  #           if [ "$PR_COUNT" -gt 0 ]; then
  #               echo "‚úÖ PR Info Found:"
                
  #               PR_NUMBER=$(echo "$PR_DATA" | jq -r '.[0].number')
  #               PR_TITLE=$(echo "$PR_DATA" | jq -r '.[0].title')
  #               PR_SOURCE=$(echo "$PR_DATA" | jq -r '.[0].head.ref')
  #               PR_TARGET=$(echo "$PR_DATA" | jq -r '.[0].base.ref')

  #               echo "Source ‚Üí Target: $(echo "$PR_DATA" | jq -r '.[0].head.ref') ‚Üí $(echo "$PR_DATA" | jq -r '.[0].base.ref')"
  #               DETAILS="\n- **PR Title**: ${PR_TITLE}\n- **PR Number**: #${PR_NUMBER}\n- **Branch**: ${PR_SOURCE} ‚Üí ${PR_TARGET}"
  #           else
  #               DETAILS="\n- **Commit Message**: ${COMMIT_MESSAGE}\n- **Author**: ${COMMIT_AUTHOR}\n"
  #           fi

  #           curl -X POST -H "Content-Type: application/json" \
  #           -d '{
  #               "@type": "MessageCard",
  #               "@context": "http://schema.org/extensions",
  #               "summary": "Deployment Notification",
  #               "themeColor": "00FF00",
  #               "title": "‚úÖ New version deployed to '"${_ENV}"' environment",
  #               "sections": [
  #               {
  #                   "activityTitle": "Deployment Details",
  #                   "text": "\n- **Environment**: '"${_ENV}"'\n- **Project**: '"${_PROJECT_ID}"'\n- **Service**: '"${_SERVICE_NAME}"'\n- **Version**: '"$SHORT_SHA"'"
  #               },
  #               {
  #                   "activityTitle": "Git Info",
  #                   "text": "'"${DETAILS}"'"
  #               }
  #               ]
  #           }' "${_TEAMS_WEBHOOK_URL}"
  #       fi

  - name: 'alpine'
    id: Notify
    entrypoint: 'sh'
    waitFor: ["Build", "Push", "Deploy"]
    secretEnv: ['GITHUB_TOKEN', 'TEAMS_WEBHOOK_URL']
    args:
      - -c
      - |
        echo "üì¶ Installing curl jq..."
        apk add --no-cache curl jq

        echo "üì£ Sending Teams notification..."
        if [ -f /workspace/failure_marker ]; then
          echo "‚ùå Failure detected. Sending failure message..."
          curl -X POST -H "Content-Type: application/json" \
          -d
            '{
              "@type": "MessageCard",
              "@context": "http://schema.org/extensions",
              "summary": "Deployment Failure",
              "themeColor": "FF0000",
              "title": "‚ùå Deployment failed for BE '${_ENV}' environment",
              "sections": [{
                "activityTitle": "Failure Details",
                "text": "- **Environment**: \"${_ENV}\"\n- **Project**: \"${_PROJECT_ID}\"\n- **Service**: \"${_SERVICE_NAME}\"\n- **Version**: \"$SHORT_SHA\""
              }]
            }' "$$TEAMS_WEBHOOK_URL"
        else
          COMMIT_SHA="$$SHORT_SHA"
          echo "Fetching commit info..."
          COMMIT_API="https://api.github.com/repos/sanadivya/gitinfo-demo/commits/$$SHORT_SHA"
          COMMIT_DATA=$(curl -s -H "Authorization: token $$GITHUB_TOKEN" "$$COMMIT_API")
          COMMIT_MESSAGE=$(echo "$$COMMIT_DATA" | jq -r '.commit.message')
          COMMIT_AUTHOR=$(echo "$$COMMIT_DATA" | jq -r '.commit.author.name')

          PR_API="https://api.github.com/repos/sanadivya/gitinfo-demo/commits/$$SHORT_SHA/pulls"
          PR_DATA=$(curl -s -H "Authorization: token $$GITHUB_TOKEN" -H "Accept: application/vnd.github.groot-preview+json" "$$PR_API")
          PR_COUNT=$(echo "$$PR_DATA" | jq 'length')

          echo "$$COMMIT_DATA" | jq .
          echo "$$PR_DATA" | jq .

          if [ "$$PR_COUNT" -gt 0 ]; then
            PR_NUMBER=$(echo "$$PR_DATA" | jq -r '.[0].number')
            PR_TITLE=$(echo "$$PR_DATA" | jq -r '.[0].title')
            PR_SOURCE=$(echo "$$PR_DATA" | jq -r '.[0].head.ref')
            PR_TARGET=$(echo "$$PR_DATA" | jq -r '.[0].base.ref')
            DETAILS="- **PR Title**: $${PR_TITLE}\n- **PR Number**: #$${PR_NUMBER}\n- **Branch**: $${PR_SOURCE} ‚Üí $${PR_TARGET}"
          else
            DETAILS="- **Commit Message**: $${COMMIT_MESSAGE}\n- **Author**: $${COMMIT_AUTHOR}"
          fi

          curl -X POST -H "Content-Type: application/json" \
          -d 
            '{
              "@type": "MessageCard",
              "@context": "http://schema.org/extensions",
              "summary": "Deployment Notification",
              "themeColor": "00FF00",
              "title": "‚úÖ New version deployed to ${_ENV} environment",
              "sections": [
                {
                  "activityTitle": "Deployment Details",
                  "text": "\n- **Environment**: `${_ENV}`\n- **Project**: `${_PROJECT_ID}`\n- **Service**: `${_SERVICE_NAME}`\n- **Version**: `$SHORT_SHA`"
                },
                {
                  "activityTitle": "Git Info",
                  "text": "$${DETAILS}"
                }
              ]
            }' "$$TEAMS_WEBHOOK_URL"
        fi
