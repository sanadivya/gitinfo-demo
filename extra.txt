DETAILS="\n- **Commit Message**: $${COMMIT_MESSAGE}\n- **Author**: $${COMMIT_AUTHOR}"
ESCAPED_DETAILS=$(printf '%s' "$${DETAILS}" | jq -R | jq -s -r 'join("\\n")')

COMMIT_API="https://api.github.com/repos/MSN-EPIC/epic-be/commits/$$COMMIT_SHA"
PR_API="https://api.github.com/repos/MSN-EPIC/epic-be/commits/$$COMMIT_SHA/pulls"


echo "üì£ Sending Teams notification..."
        if [ -f /workspace/failure_marker ]; then
          echo "‚ùå Failure detected. Sending failure message..."

          curl -X POST -H "Content-Type: application/json" \
          -d "{
                \"@type\": \"MessageCard\",
                \"@context\": \"http://schema.org/extensions\",
                \"summary\": \"Deployment Failure\", 
                \"themeColor\": \"FF0000\",
                \"title\": \"‚ùå Deployment failed for BE '${_ENV}' environment\",
                \"sections\": [
                  {
                    \"activityTitle\": \"Failure Details\",
                    \"text\": \"- **Environment**: ${_ENV}\\n- **Project**: ${_PROJECT_ID}\\n- **Service**: ${_SERVICE_NAME}\\n- **Version**: $SHORT_SHA\\n- **Reason**: $$FAIL_REASON"}, 
                    {
                      \"activityTitle\": \"Status\", 
                      \"text\": \"Deployment Failed.\"
                    }
                ]
              }" \
            "$$TEAMS_WEBHOOK_FAILURE_URL"

- name: "ubuntu"
    id: Notify
    entrypoint: "bash"
    waitFor: ["Build", "Push", "Deploy"]
    allowFailure: true
    secretEnv: ['GITHUB_TOKEN', 'TEAMS_WEBHOOK_URL', 'TEAMS_WEBHOOK_FAILURE_URL']
    args:
      - -c
      - |
        echo "üîî Notify step started"
        echo "üîç Checking for failure marker..."

        echo "üì¶ Installing curl jq..."
        apt-get update && apt-get install -y curl jq git

        FAIL_REASON=$(cat /workspace/failure_marker)
        echo "üîç Reason: $$FAIL_REASON"

        echo "üì£ Sending Teams notification..."
        if [ -f /workspace/failure_marker ]; then
          echo "‚ùå Failure detected. Sending failure message..."

          curl -X POST -H "Content-Type: application/json" \
          -d "{
                \"@type\": \"MessageCard\",
                \"@context\": \"http://schema.org/extensions\",
                \"summary\": \"Deployment Failure\", 
                \"themeColor\": \"FF0000\",
                \"title\": \"‚ùå Deployment failed for BE '${_ENV}' environment\",
                \"sections\": [
                  {
                    \"activityTitle\": \"Failure Details\",
                    \"text\": \"- **Environment**: ${_ENV}\\n- **Project**: ${_PROJECT_ID}\\n- **Service**: ${_SERVICE_NAME}\\n- **Version**: $SHORT_SHA\"}, 
                    {
                      \"activityTitle\": \"Status\", 
                      \"text\": \"Deployment Failed.\"
                    }
                ]
              }" \
            "$$TEAMS_WEBHOOK_FAILURE_URL"
        else
          COMMIT_SHA=$(git rev-parse HEAD)

          echo "Fetching commit info..."
          COMMIT_API="https://api.github.com/repos/sanadivya/gitinfo-demo/commits/$$COMMIT_SHA"
          COMMIT_DATA=$(curl -s -H "Authorization: token $$GITHUB_TOKEN" "$$COMMIT_API")
          COMMIT_MESSAGE=$(echo "$$COMMIT_DATA" | jq -r '.commit.message')
          COMMIT_AUTHOR=$(echo "$$COMMIT_DATA" | jq -r '.commit.author.name')

          PR_API="https://api.github.com/repos/sanadivya/gitinfo-demo/commits/$$COMMIT_SHA/pulls"
          PR_DATA=$(curl -s -H "Authorization: token $$GITHUB_TOKEN" -H "Accept: application/vnd.github.groot-preview+json" "$$PR_API")
          PR_COUNT=$(echo "$$PR_DATA" | jq 'length')

          if [ "$$PR_COUNT" -gt 0 ]; then
            PR_NUMBER=$(echo "$$PR_DATA" | jq -r '.[0].number')
            PR_TITLE=$(echo "$$PR_DATA" | jq -r '.[0].title')
            PR_SOURCE=$(echo "$$PR_DATA" | jq -r '.[0].head.ref')
            PR_TARGET=$(echo "$$PR_DATA" | jq -r '.[0].base.ref')
            PR_DESCRIPTION=$(echo "$$PR_DATA" | jq -r '.[0].body')

            if [ "$$PR_DESCRIPTION" = "null" ] || [ -z "$$PR_DESCRIPTION" ]; then
              PR_DESCRIPTION="-"
            fi

            PR_AUTHOR_LOGIN=$(echo "$$PR_DATA" | jq -r '.[0].user.login')

            PR_AUTHOR_NAME=$(curl -s -H "Authorization: token $$GITHUB_TOKEN" \
              "https://api.github.com/users/$${PR_AUTHOR_LOGIN}" | jq -r '.name')

            if [ "$$PR_AUTHOR_NAME" = "null" ] || [ -z "$$PR_AUTHOR_NAME" ]; then
              PR_AUTHOR_NAME="$${PR_AUTHOR_LOGIN}"
            fi

            PR_DESCRIPTION_FORMATTED=$(echo "$${PR_DESCRIPTION}" | sed 's/^/  /' | sed ':a;N;$!ba;s/\n/\\n/g')

            DETAILS="\n- **PR Title**: $${PR_TITLE}\\n- **PR Number**: #$${PR_NUMBER}\\n- **PR Description**: \\n$${PR_DESCRIPTION_FORMATTED}\\n- **PR Author**: $${PR_AUTHOR_NAME}"
            ESCAPED_DETAILS=$(printf '%s' "$${DETAILS}" | jq -R | jq -s -r 'join("\\n")')

            GIT_INFO_SECTION="{
              \"activityTitle\": \"PR Details\",
              \"text\": \"$${ESCAPED_DETAILS}\"
            },"
            
          else
            GIT_INFO_SECTION=""
            DETAILS=""
          fi
           
          if [ "$_ENV" = "dev" ]; then
            THEME_COLOR="00FF00"  # Green
          elif [ "$_ENV" = "staging" ]; then
            THEME_COLOR="FFA500"  # Orange
          elif [ "$_ENV" = "prod" ]; then
            THEME_COLOR="FF0000"  # Red
          fi

          curl -X POST -H "Content-Type: application/json" \
          -d "{
                \"@type\": \"MessageCard\",
                \"@context\": \"http://schema.org/extensions\",
                \"summary\": \"Deployment Notification\",
                \"themeColor\": \"$$THEME_COLOR\",
                \"title\": \"‚úÖ New version deployed to ${_ENV} environment\",
                \"sections\": [
                  {
                    \"activityTitle\": \"Deployment Details\",
                    \"text\": \"- **Environment**: ${_ENV}\\n- **Project**: ${_PROJECT_ID}\\n- **Service**: ${_SERVICE_NAME}\\n- **Version**: $SHORT_SHA\"
                  },
                  $${GIT_INFO_SECTION} 
                  {
                    \"activityTitle\": \"Status\",
                    \"text\": \"Deployment completed successfully.\"
                  }
                ]
              }" \
            "$$TEAMS_WEBHOOK_URL"
        fi





##################----------------######################------------------------############################

# Step 4A: Notify on any failure (runs after first failure from any step)
  - id: NotifyFailure
    name: "ubuntu"
    entrypoint: "bash"
    waitFor: ["Build", "Push", "Deploy"]
    allowFailure: true
    secretEnv: ['GITHUB_TOKEN', 'TEAMS_WEBHOOK_FAILURE_URL']
    args:
      - -c
      - |
        echo "üîî Notify step started"
        echo "üîç Checking for failure marker..."

        echo "üì¶ Installing curl jq..."
        apt-get update && apt-get install -y curl jq git

        FAIL_REASON=$(cat /workspace/failure_marker)
        echo "üîç Reason: $$FAIL_REASON"

        echo "üì£ Sending Teams notification..."

        if [ -f /workspace/failure_marker ]; then
          echo "‚ùå Failure detected. Sending failure message..."
          curl -X POST -H "Content-Type: application/json" \
          -d "{
                \"@type\": \"MessageCard\",
                \"@context\": \"http://schema.org/extensions\",
                \"summary\": \"Deployment Failure\", 
                \"themeColor\": \"FF0000\",
                \"title\": \"‚ùå Deployment failed for BE '${_ENV}' environment\",
                \"sections\": [
                  {
                    \"activityTitle\": \"Failure Details\",
                    \"text\": \"- **Environment**: ${_ENV}\\n- **Project**: ${_PROJECT_ID}\\n- **Service**: ${_SERVICE_NAME}\\n- **Version**: $SHORT_SHA\"
                  },
                  {
                    \"activityTitle\": \"Status\", 
                    \"text\": \"Deployment Failed.\"
                  }
                ]
              }" \
            "$$TEAMS_WEBHOOK_FAILURE_URL"
        fi

  # Step 4B: Notify on success (only if Deploy succeeds)
  - id: NotifySuccess
    name: "ubuntu"
    entrypoint: "bash"
    waitFor: ["Deploy"]
    secretEnv: ['GITHUB_TOKEN', 'TEAMS_WEBHOOK_URL']
    args:
      - -c
      - |
        echo "üîî Notify step started"
        echo "üîç Checking for failure marker..."

        echo "üì¶ Installing curl jq..."
        apt-get update && apt-get install -y curl jq git

        COMMIT_SHA=$(git rev-parse HEAD)

        PR_API="https://api.github.com/repos/sanadivya/gitinfo-demo/commits/$$COMMIT_SHA/pulls"
        PR_DATA=$(curl -s -H "Authorization: token $$GITHUB_TOKEN" -H "Accept: application/vnd.github.groot-preview+json" "$$PR_API")
        PR_COUNT=$(echo "$$PR_DATA" | jq 'length')

        if [ "$$PR_COUNT" -gt 0 ]; then
            PR_NUMBER=$(echo "$$PR_DATA" | jq -r '.[0].number')
            PR_TITLE=$(echo "$$PR_DATA" | jq -r '.[0].title')
            PR_SOURCE=$(echo "$$PR_DATA" | jq -r '.[0].head.ref')
            PR_TARGET=$(echo "$$PR_DATA" | jq -r '.[0].base.ref')
            PR_DESCRIPTION=$(echo "$$PR_DATA" | jq -r '.[0].body')

            if [ "$$PR_DESCRIPTION" = "null" ] || [ -z "$$PR_DESCRIPTION" ]; then
              PR_DESCRIPTION="-"
            fi

            PR_AUTHOR_LOGIN=$(echo "$$PR_DATA" | jq -r '.[0].user.login')

            PR_AUTHOR_NAME=$(curl -s -H "Authorization: token $$GITHUB_TOKEN" \
              "https://api.github.com/users/$${PR_AUTHOR_LOGIN}" | jq -r '.name')

            if [ "$$PR_AUTHOR_NAME" = "null" ] || [ -z "$$PR_AUTHOR_NAME" ]; then
              PR_AUTHOR_NAME="$${PR_AUTHOR_LOGIN}"
            fi

            PR_DESCRIPTION_FORMATTED=$(echo "$${PR_DESCRIPTION}" | sed 's/^/  /' | sed ':a;N;$!ba;s/\n/\\n/g')

            DETAILS="\n- **PR Title**: $${PR_TITLE}\\n- **PR Number**: #$${PR_NUMBER}\\n- **PR Description**: \\n$${PR_DESCRIPTION_FORMATTED}\\n- **PR Author**: $${PR_AUTHOR_NAME}"
            ESCAPED_DETAILS=$(printf '%s' "$${DETAILS}" | jq -R | jq -s -r 'join("\\n")')

            GIT_INFO_SECTION="{
              \"activityTitle\": \"PR Details\",
              \"text\": \"$${ESCAPED_DETAILS}\"
            },"
            
          else
            GIT_INFO_SECTION=""
            DETAILS=""
          fi
           
          if [ "$_ENV" = "dev" ]; then
            THEME_COLOR="00FF00"  # Green
          elif [ "$_ENV" = "staging" ]; then
            THEME_COLOR="FFA500"  # Orange
          elif [ "$_ENV" = "prod" ]; then
            THEME_COLOR="FF0000"  # Red
          fi

        if [ ! -f /workspace/failure_marker ]; then
          echo "‚úÖ All steps succeeded. Sending success message..."
          curl -X POST -H "Content-Type: application/json" \
          -d "{
                \"@type\": \"MessageCard\",
                \"@context\": \"http://schema.org/extensions\",
                \"summary\": \"Deployment Success\",
                \"themeColor\": \"00FF00\",
                \"title\": \"‚úÖ New version deployed to ${_ENV} environment\",
                \"sections\": [
                  {
                    \"activityTitle\": \"Deployment Details\",
                    \"text\": \"- **Environment**: ${_ENV}\\n- **Project**: ${_PROJECT_ID}\\n- **Service**: ${_SERVICE_NAME}\\n- **Version**: $SHORT_SHA\"
                  },
                  {
                    \"activityTitle\": \"Status\",
                    \"text\": \"Deployment completed successfully.\"
                  }
                ]
              }" \
            "$$TEAMS_WEBHOOK_URL"
        fi

#######################################################################


          PR_API="https://api.github.com/repos/sanadivya/gitinfo-demo/commits/$$COMMIT_SHA/pulls"
          PR_DATA=$(curl -s -H "Authorization: token $$GITHUB_TOKEN" -H "Accept: application/vnd.github.groot-preview+json" "$$PR_API")
          PR_COUNT=$(echo "$$PR_DATA" | jq 'length')